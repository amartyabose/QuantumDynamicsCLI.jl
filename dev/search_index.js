var documenterSearchIndex = {"docs":
[{"location":"documentation/Simulate/#qdsim-simulate","page":"Simulate Module","title":"qdsim simulate","text":"","category":"section"},{"location":"documentation/Simulate/","page":"Simulate Module","title":"Simulate Module","text":"QuantumDynamicsCLI.Simulate","category":"page"},{"location":"documentation/Simulate/#QuantumDynamicsCLI.Simulate","page":"Simulate Module","title":"QuantumDynamicsCLI.Simulate","text":"Module for simulating the dynamics of the system.\n\n\n\n\n\n","category":"module"},{"location":"documentation/Simulate/","page":"Simulate Module","title":"Simulate Module","text":"QuantumDynamicsCLI.Simulate.run","category":"page"},{"location":"documentation/Simulate/#QuantumDynamicsCLI.Simulate.run","page":"Simulate Module","title":"QuantumDynamicsCLI.Simulate.run","text":"run(system_input, simulate_input)\n\nRun a simulation as specified in the simulation_input TOML file on the system specified in the system_input TOML file.\n\n\n\n\n\n","category":"function"},{"location":"documentation/Simulate/","page":"Simulate Module","title":"Simulate Module","text":"QuantumDynamicsCLI.Simulate.propagate_using_tmats","category":"page"},{"location":"documentation/Simulate/#QuantumDynamicsCLI.Simulate.propagate_using_tmats","page":"Simulate Module","title":"QuantumDynamicsCLI.Simulate.propagate_using_tmats","text":"propagate_using_tmats(system_input, simulate_input)\n\nPropagate a particular density matrix using the transfer tensors generated in a previous path integral simulation.\n\n\n\n\n\n","category":"function"},{"location":"documentation/Simulate/","page":"Simulate Module","title":"Simulate Module","text":"QuantumDynamicsCLI.Simulate.propagate_using_gqme","category":"page"},{"location":"documentation/Simulate/#QuantumDynamicsCLI.Simulate.propagate_using_gqme","page":"Simulate Module","title":"QuantumDynamicsCLI.Simulate.propagate_using_gqme","text":"propagate_using_gqme(system_input, simulate_input)\n\nPropagate a particular density matrix using the generalized quantum master equation. The memory kernel is derived from a previous path integral simulation via the transfer tensor method.\n\n\n\n\n\n","category":"function"},{"location":"documentation/ComonIcon/#Comonicon-Documentation","page":"Comonicon","title":"Comonicon Documentation","text":"","category":"section"},{"location":"documentation/ComonIcon/","page":"Comonicon","title":"Comonicon","text":"QuantumDynamicsCLI.comonicon_install","category":"page"},{"location":"documentation/ComonIcon/#QuantumDynamicsCLI.comonicon_install","page":"Comonicon","title":"QuantumDynamicsCLI.comonicon_install","text":"comonicon_install(;kwargs...)\n\nInstall the CLI manually. This will use the default configuration in Comonicon.toml, if it exists. For more detailed reference, please refer to Comonicon documentation.\n\n\n\n\n\n","category":"function"},{"location":"documentation/ComonIcon/","page":"Comonicon","title":"Comonicon","text":"QuantumDynamicsCLI.comonicon_install_path","category":"page"},{"location":"documentation/ComonIcon/#QuantumDynamicsCLI.comonicon_install_path","page":"Comonicon","title":"QuantumDynamicsCLI.comonicon_install_path","text":"comonicon_install_path(;[yes=false])\n\nInstall the PATH and FPATH to your shell configuration file. You can use comonicon_install_path(;yes=true) to skip interactive prompt. For more detailed reference, please refer to Comonicon documentation.\n\n\n\n\n\n","category":"function"},{"location":"documentation/ComonIcon/","page":"Comonicon","title":"Comonicon","text":"QuantumDynamicsCLI.COMMAND_ENTRY_DOC_STUB","category":"page"},{"location":"documentation/ComonIcon/#QuantumDynamicsCLI.COMMAND_ENTRY_DOC_STUB","page":"Comonicon","title":"QuantumDynamicsCLI.COMMAND_ENTRY_DOC_STUB","text":"Quantum dynamics simulations using QuantumDynamics.jl made a breeze\n\n\n\n\n\n","category":"constant"},{"location":"#QuantumDynamicsCLI","page":"Introduction","title":"QuantumDynamicsCLI","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Documentation\n(Image: Dev)","category":"page"},{"location":"#What-is-QuantumDynamicsCLI?","page":"Introduction","title":"What is QuantumDynamicsCLI?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Simulating the dynamics of quantum systems is a challenging task with a multitude of complicated computational methods. The QuantumDynamics.jl package provides modular open-source implementations of an increasingly growing number of these methods, while remaining a flexible platform for further development. However, owing primarily to its exceptionally flexible nature, the usage of QuantumDynamics.jl happens through short Julia scripts. This means that for the most common simulation jobs, one needs to effectively rewrite the same code multiple times increasing the chances of errors. As a means to making some of the common types of simulations more facile, we now offer the QuantumDynamicsCLI.jl package which installs the qdsim application as a sister code of the QuantumDynamics.jl package. As the framework grows, so will this application grow to accommodate the new methods and their most common use cases.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"QuantumDynamicsCLI.jl is a registered package. Installation is a simple procedure. It can be done either through the Pkg REPL:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"~ julia","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ]\npkg> add QuantumDynamicsCLI","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"or by using the Pkg package manager in a script as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg\njulia> Pkg.add(\"QuantumDynamicsCLI\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"After the package gets built, an executable called qdsim will be placed in $HOME/.julia/bin along with the code completions for the shell in $HOME/.julia/completions. Please add $HOME/.julia/bin to your path and source the correct completions file.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"While QuantumDynamicsCLI.jl builds on top of the QuantumDynamics.jl package, separate installation of that package is unnecessary. Just installing QuantumDynamicsCLI.jl would install QuantumDynamics.jl as a dependency.","category":"page"},{"location":"#Basic-Usage","page":"Introduction","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"qdsim comes as a single program with multiple sub-components. These components can call each other, but are mostly meant for the end-user, and are used for running simulations and post-processing the data. The general syntax for running any particular component is as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"> qdsim <component_name> <command_name> <arguments>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Currently, two commands are supported:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"simulate: gives access to various techniques for simulating the dynamics\npost: provides post-processing tools for the output","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The most important sub-command of simulate is run, and for post is get-observable.","category":"page"},{"location":"#Types-of-Simulations","page":"Introduction","title":"Types of Simulations","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The primary focus of the qdsim application provided by the QuantumDynamicsCLI.jl package and the underlying QuantumDynamics.jl package is the simulation of dynamics and spectra of open quantum systems. New methods are consistently added and the support for old methods improved. Currently the following methods are supported:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Iterative Quasi-adiabatic Propagators Path Integral (iQuAPI)\nBlip QuAPI\nTime-Evolved Matrix Product Operators (TEMPO)\nPairwise-Connected Tensor Network Path Integral (PC-TNPI)\nstandard Hierarchical Equations of Motion (HEOM)\nscaled HEOM\nTransfer Tensor Method coupled with any of the path integral methods\nGeneralized Quantum Master Equation (GQME)\nMultichromophore Incoherent Forster Theory\nBloch-Redfield Master Equation\nLindblad Master Equation","category":"page"},{"location":"documentation/Post/#qdsim-post","page":"Post Module","title":"qdsim post","text":"","category":"section"},{"location":"documentation/Post/","page":"Post Module","title":"Post Module","text":"QuantumDynamicsCLI.Post","category":"page"},{"location":"documentation/Post/#QuantumDynamicsCLI.Post","page":"Post Module","title":"QuantumDynamicsCLI.Post","text":"Various routines for post-processing and analysing the simulation results.\n\n\n\n\n\n","category":"module"},{"location":"documentation/Post/","page":"Post Module","title":"Post Module","text":"QuantumDynamicsCLI.Post.merge_into","category":"page"},{"location":"documentation/Post/#QuantumDynamicsCLI.Post.merge_into","page":"Post Module","title":"QuantumDynamicsCLI.Post.merge_into","text":"Combine the source files sources into output. If output does not exist, it is created.\n\nArgs\n\nsources: source output files\noutput: destination output file\n\n\n\n\n\n","category":"function"}]
}
